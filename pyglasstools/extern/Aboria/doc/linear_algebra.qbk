[section Matrix-free Linear Algebra with Eigen]

[import ../tests/operators.h]

operators
Given that Aboria can describe bivariate expression, it is natural to recast 
these bivariate expressions in terms of matricies. If the bivariate expression 
depends on labels `a` and `b`, each referring to a set of N and M particles 
respectively, then the result of this expression over the set of NxM particle 
pairs will form a NxM matrix. It is therefore possible to treat a bivarate 
expression as if it where a matrix, or linear operator. Since we are using 
linear operators, In this section we will use the terms operator and matrix 
interchangeably, however note that we are not actually forming a matrix, and do 
not ever store the values of the matrix. Rather we simply store an expression 
which is evaluated when needed (i.e. during a matrix-vector product or an 
iterative solver step). Therefore this technique can be called "Matrix-free 
Linear Algebra". It is useful when dealing with 

* large dense matricies that might be too large to store in RAM
* highly dynamic matricies whose values and sparsity are constantly changing
* constant valued matricies 

To provide the concept and API of a matrix or linear operator, we will use the 
C++ library [@eigen.tuxfamily.org Eigen]. Aboria provides functionality to wrap 
bivariate expressions in [classref Aboria::MatrixReplacement], so that Eigen can 
treat them as normal sparse matricies.

[section Creating Operators]

You can use the [funcref Aboria::create_eigen_operator] function to create an 
Eigen operator. The function takes two labels as its first and second arguments 
corresponding to the rows and columns of the matrix, a bivariate expression as 
the third argument, and an optional bivariate boolean expression for the third 
which determines the sparsity of the matrix.

For example, after creating a variable symbol `v`, and two labels `a` and `b`, 
the following code snippet creates an Eigen operator `A` that adds the `v` 
values from all particle pairs.

``
Symbol<variable> v;
Label<0,ParticlesType> a(particles);
Label<1,ParticlesType> b(particles);
auto A = create_eigen_operator(a,b, v[a] + v[b]);
``

Assuming there are 3 particles in the `particles` container, this operator can 
then be applied to an Eigen vector like so:

``
Eigen::VectorXd v(3);
Eigen::VectorXd ans(3);
v << 1, 2, 3;

ans = A*v;
``

You can also set the sparsity of the operator by providing a fourth parameter to 
[funcref Aboria::create_eigen_operator], a boolean expression that is `false` 
when the operator should evaluate to zero. For example, 

``
auto dx = create_dx(a,b);
auto B = create_eigen_operator(a,b, s1[a] + s2[b], norm(dx) < diameter);
``

Finally, you might also want to specify an operator that only depends on a 
single label, i.e. a vector rather than a matrix. This can be done by using the 
[classref Aboria::One] symbol in conjunction with the [funcref 
Aboria::create_eigen_operator] function.

``
One one;
auto C = create_eigen_operator(a,one, v[a]);
``


[endsect]

[section Block Operators]

It is common that you would like to compose operators in a tiled or block 
format, and Aboria provides a functionality to do this using the [funcref 
Aboria::create_block_eigen_operator]. This function is templated by two unsigned 
integers N and M representing an NxM block operator, and takes NM arguments for 
the required number of operators. For example,

``
auto A = create_eigen_operator(a,b, s1[a]);
auto B = create_eigen_operator(a,one, s2[a]);
auto C = create_eigen_operator(one,b, s2[b]);
auto Zero = create_eigen_operator(one,one, 0.);

auto Full = create_block_eigen_operator<2,2>(A,B,C,Zero);
``

Note also the creation of a zero block in `Full`, which is handled efficiently 
by Aboria by simply skipping its evaluation when applying the `Full` operator.

[endsect]

[section Iterative Solvers]

The [classref Aboria::MatrixReplacement] class can multiply other Eigen vectors, 
and can be used in Eigen's iterative solvers. Both 
`Eigen::IdentityPreconditioner` and `Eigen::DiagonalPreconditioner` 
preconditioners are supported. Below is an example of how to use Eigen's GMRES 
iterative solver to solve the equation 

$$\phi = W \gamma$$


``
Label<0,ParticlesType> a(knots);
Label<1,ParticlesType> b(knots);
One one;
auto dx = create_dx(a,b);
Accumulate<std::plus<double> > sum;

auto G = create_eigen_operator(a,b, 
            exp(-pow(norm(dx),2))
        );
auto P = create_eigen_operator(a,one,
                1.0
        );
auto Pt = create_eigen_operator(one,b,
                1.0
        );
auto Zero = create_eigen_operator(one,one, 0.);

auto W = create_block_eigen_operator<2,2>(G, P,
                                          Pt,Zero);

Eigen::VectorXd phi(knots.size()+1), gamma(knots.size()+1);

//setup phi values here

Eigen::GMRES<decltype(W), Eigen::Lower|Eigen::Upper, 
    Eigen::DiagonalPreconditioner<double>> cg;
cg.compute(W);
gamma = cg.solve(phi);
``

[endsect]


[endsect]
